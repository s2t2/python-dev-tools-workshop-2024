# "Command-line Computing" Exercise

Before we start learning about Python or software development, it will be helpful for us to achieve a basic level of familiarity with a command-line application. We use the command-line to navigate the computer's filesystem, execute Python scripts, and perform other tasks using command-line utilities (CLIs).

Commands may differ based on which operating system and command-line application you're using, but we should encouraged to learn the prevalent "unix-style" commands:

  + On Mac OS, the default Terminal application will allow students to use unix-style commands.
  + On Windows OS, the default Command Prompt application uses different commands, but installing the Git Bash application will allow students to use unix-style commands.

Additional References:

  + [Intro to the Command-Line - Mozilla](https://developer.mozilla.org/en-US/docs/Learn/Tools_and_testing/Understanding_client-side_tools/Command_line)

## Walkthrough Video

{{< video https://youtu.be/E6ezORXPBvg
    title= "Hello, Version Control Exercise Walkthrough"
>}}

## Instructions

Open the Terminal application (Mac) or the Git Bash application (Windows).

After typing each of the commands below, press "enter" to execute it.

> NOTE: You can copy and paste the commands, however on Git Bash you will need to right click to copy or paste, as keyboard shortcuts like "control + c" or "control + v" don't work on Git Bash.

> NOTE: You can optionally clear previous terminal output at any time by pressing "command + k" (Mac), or by typing `clear` and pressing "enter".


### Current User

Display the current user's name:

```sh
whoami
```

### Present Working Directory

Display the current/present working directory:

```sh
pwd
```

### Listing Files in a Directory

List files in the current working directory:

```sh
ls
```

Alternatively, list files using a different display, including file permissions and hidden files:

```sh
ls -al
```

### Navigating and Managing Directories

Change directories (specifying an absolute file path):

```sh
cd ~/Desktop
```

> FYI: the tilde (`~`) represents your "home" filepath

> FYI: you can use `cd ..` to move "up" one directory relative to the current working directory

Open a directory via the operating system's filesystem explorer:

```sh
# Mac Terminal:
open .

# Windows Git Bash:
explorer .
```

Make a new directory:

```sh
mkdir my_folder
```

Remove a directory:

```sh
# triggers an error:
# rm my_folder

# uses options called flags to recursively (-r) force (-f) removal:
rm -rf my_folder
```

### Managing Files

Setup a new directory in which to add some files, and navigate into that directory:

```sh
mkdir my_folder
cd my_folder
```

Create one or more files in the new directory you just created:

```sh
touch README.md
touch index.html
touch my_data.csv
touch my_message.txt
```

Remove a file:

```sh
rm index.html
```

Open a file in a text editor like VS Code (then edit it, and save it):

```sh
code my_message.txt
```

> NOTE: Mac users may need to first configure the `code` command by following these [VS Code shell command setup instructions](../../prereqs/local-dev-setup/vs-code-config.qmd#shell-commands)

> NOTE: if the `code` command doesn't work for you, no worries - feel free to move on.

Display file contents:

```sh
cat my_message.txt
```

Move a file:

```sh
mv ~/Desktop/my_folder/my_message.txt ~/Desktop
```

> FYI: If you are into maximum efficiency, press "tab" to auto-complete file paths so you don't have to type the whole thing. :smiley_cat:

Copy a file:

```sh
cp ~/Desktop/my_message.txt ~/Desktop/my_folder
```

Copy contents of a file into the clipboard for pasting:

```sh
# Mac OS:
pbcopy < ~/Desktop/my_folder/my_message.txt

# Windows OS:
cat ~/Desktop/my_folder/my_message.txt | clip

# ... then just paste as you normally would after copying some text
```




<hr>

## Further Exploration (Mac Only)

There are many other utilities to use from the command-line. For example, you may optionally try some of the examples below.

Making your computer speak:

```sh
say "Hello, I am your computer. Let's be friends."
```

Tracing the route traveled by a network request:

```sh
traceroute google.com
# ... stop after a few seconds if necessary by pressing: control + c
```

Timing the duration of a network request:

```sh
ping google.com
# ... stop after a few seconds if necessary by pressing: control + c
```

Requesting the contents of a webpage:

```sh
curl google.com

curl http://www.google.com

curl https://raw.githubusercontent.com/prof-rossetti/intro-to-python/master/data/products.json
```
